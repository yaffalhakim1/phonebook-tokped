import Head from "next/head";
import { Plus_Jakarta_Sans } from "next/font/google";
import { useQuery, useMutation } from "@apollo/client";
import { ContactResponse, DeleteContactResponse } from "@/types/contact_types";
import { DELETE_CONTACT, GET_CONTACT } from "@/resource/queries";
import useLocalStorage from "@/hooks/useLocalStorage";
import {
  Box,
  Button,
  ButtonGroup,
  Container,
  Flex,
  Heading,
  Spacer,
  Stack,
  Table,
  TableCaption,
  TableContainer,
  Tbody,
  Td,
  Text,
  Tfoot,
  Th,
  Thead,
  Tr,
} from "@chakra-ui/react";

const jakarta = Plus_Jakarta_Sans({ subsets: ["latin"] });

export default function Home() {
  const { getFavoritesFromStorage, addToFavoritesStorage } = useLocalStorage();

  const { loading, error, data, fetchMore } = useQuery<ContactResponse>(
    GET_CONTACT,
    {
      variables: {
        offset: 0,
        limit: 20,
      },
    }
  );

  const [deleteContact, { loading: deleteLoading, error: deleteError }] =
    useMutation<DeleteContactResponse>(DELETE_CONTACT);

  const handleDelete = async (contactId: number) => {
    try {
      const response = await deleteContact({ variables: { id: contactId } });
      const deleted = response?.data?.delete_contact_by_pk;
      if (deleted) {
        alert(`Deleted contact: ${deleted.first_name} ${deleted.last_name}`);
      } else {
        alert("Failed to delete contact.");
      }
    } catch (error) {
      alert("Error occurred while deleting contact.");
    }
  };

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error : {error.message}</p>;
  if (deleteLoading) return <p>deleting...</p>;
  if (deleteError) return <p>Error deleteing </p>;

  const favorites = getFavoritesFromStorage();
  const favContacts = data?.contact.filter((contact) =>
    favorites.includes(contact.id)
  );
  const regContacts = data?.contact.filter(
    (contact) => !favorites.includes(contact.id)
  );

  return (
    <>
      <Head>
        <title>Phonebook Tokopedia</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxW="md">
        <main className={jakarta.className}>
          {/* <div className={styles.description}></div> */}
          <Flex minWidth="max-content" alignItems="center" gap="2" p="2">
            <Box>
              <Heading size="md">Phonebook Tokopedia</Heading>
            </Box>
            <Spacer />
            <ButtonGroup gap="2">
              <Button colorScheme="teal">Sign Up</Button>
              <Button colorScheme="teal">Log in</Button>
            </ButtonGroup>
          </Flex>
          <div>
            <Text as="b">Fav Contact</Text>

            <TableContainer>
              <Table variant="simple">
                <Thead>
                  <Tr>
                    <Th>Name</Th>
                    <Th>Phone Number</Th>
                  </Tr>
                </Thead>
                {favContacts?.map((contact) => (
                  <div key={contact.id}>
                    <Tbody>
                      <Tr>
                        <Td>{contact.first_name}</Td>
                        <Td>
                          {contact.phones.map((phone, index: number) => (
                            <div key={index}>{phone.number}</div>
                          ))}
                        </Td>
                      </Tr>
                    </Tbody>
                  </div>
                ))}

                <h2>Regular contact</h2>

                {regContacts?.slice(0, 10).map((contact) => (
                  <div key={contact.id}>
                    <Tbody>
                      <Tr>
                        <Td>{contact.first_name}</Td>
                        <Td>
                          {contact.phones.map((phone, index: number) => (
                            <div key={index}>{phone.number}</div>
                          ))}
                        </Td>
                      </Tr>
                    </Tbody>
                  </div>
                ))}
              </Table>
            </TableContainer>

            {/* <h3>{contact.first_name}</h3>
                {contact.phones.map((phone, index: number) => (
                  <p key={index}>{phone.number}</p>
                ))}
                <ButtonGroup gap="2">
                  <Button
                    colorScheme="green"
                    onClick={() => addToFavoritesStorage(contact.id)}
                  >
                    Add to Fav
                  </Button>
                  <Button
                    colorScheme="red"
                    onClick={() => handleDelete(contact.id)}
                  >
                    Delete Contact
                  </Button>
                </ButtonGroup>
              </div>
            ))} */}
            <button
              onClick={() =>
                fetchMore({
                  variables: {
                    offset: data?.contact.length,
                  },
                  updateQuery: (prev, { fetchMoreResult }) => {
                    if (!fetchMoreResult) return prev;
                    return {
                      ...fetchMoreResult,
                      contact: [...prev.contact, ...fetchMoreResult.contact],
                    };
                  },
                })
              }
            >
              Fetch More
            </button>
          </div>
        </main>
      </Container>
    </>
  );
}
