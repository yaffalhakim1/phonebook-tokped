import Head from "next/head";
import { Plus_Jakarta_Sans } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useQuery, useMutation } from "@apollo/client";
import { ContactResponse, DeleteContactResponse } from "@/types/contact_types";
import { DELETE_CONTACT, GET_CONTACT } from "@/resource/queries";
import useLocalStorage from "@/hooks/useLocalStorage";
import { css } from "@emotion/react";
import { Button } from "@/styles/style";

const jakarta = Plus_Jakarta_Sans({ subsets: ["latin"] });

export default function Home() {
  const { getFavoritesFromStorage, addToFavoritesStorage } = useLocalStorage();

  const { loading, error, data, fetchMore } = useQuery<ContactResponse>(
    GET_CONTACT,
    {
      variables: {
        offset: 0,
        limit: 20,
      },
    }
  );

  const [deleteContact, { loading: deleteLoading, error: deleteError }] =
    useMutation<DeleteContactResponse>(DELETE_CONTACT);

  const handleDelete = async (contactId: number) => {
    try {
      const response = await deleteContact({ variables: { id: contactId } });
      const deleted = response?.data?.delete_contact_by_pk;
      if (deleted) {
        alert(`Deleted contact: ${deleted.first_name} ${deleted.last_name}`);
      } else {
        alert("Failed to delete contact.");
      }
    } catch (error) {
      alert("Error occurred while deleting contact.");
    }
  };

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error : {error.message}</p>;
  if (deleteLoading) return <p>deleting...</p>;
  if (deleteError) return <p>Error deleteing </p>;

  const favorites = getFavoritesFromStorage();
  const favContacts = data?.contact.filter((contact) =>
    favorites.includes(contact.id)
  );
  const regContacts = data?.contact.filter(
    (contact) => !favorites.includes(contact.id)
  );

  return (
    <>
      <Head>
        <title>Phonebook Tokopedia</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={styles.description}></div>
        <div>
          <h2>Fav Contact</h2>
          {favContacts?.map((contact) => (
            <div key={contact.id}>
              <h3>{contact.first_name}</h3>
              {contact.phones.map((phone, index: number) => (
                <p key={index}>{phone.number}</p>
              ))}
            </div>
          ))}
          <h2>Regular contac</h2>
          {regContacts?.slice(0, 10).map((contact) => (
            <div key={contact.id}>
              <h3>{contact.first_name}</h3>
              {contact.phones.map((phone, index: number) => (
                <p key={index}>{phone.number}</p>
              ))}
              <button onClick={() => addToFavoritesStorage(contact.id)}>
                Add to Fav
              </button>
              <Button onClick={() => handleDelete(contact.id)}>
                Delete Contact
              </Button>
            </div>
          ))}
          <button
            onClick={() =>
              fetchMore({
                variables: {
                  offset: data?.contact.length,
                },
                updateQuery: (prev, { fetchMoreResult }) => {
                  if (!fetchMoreResult) return prev;
                  return {
                    ...fetchMoreResult,
                    contact: [...prev.contact, ...fetchMoreResult.contact],
                  };
                },
              })
            }
          >
            Fetch More
          </button>
        </div>
      </main>
    </>
  );
}
